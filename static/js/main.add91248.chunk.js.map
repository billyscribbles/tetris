{"version":3,"sources":["images/bg.jpg","gameHelper.js","components/styles/StyledCell.js","tetrominos.js","components/Cell.js","components/styles/StyledStage.js","components/Stage.js","components/styles/StyledDisplay.js","components/Display.js","components/styles/StyledStartButton.js","components/StartButton.js","components/styles/StyledTetris.js","hooks/usePlayer.js","hooks/useStage.js","hooks/useGameStatus.js","components/Tetris.js","hooks/useInterval.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","createStage","Array","from","fill","checkCollision","player","stage","moveX","x","moveY","y","tetromino","length","pos","StyledCell","styled","div","props","color","type","TETROMINOS","0","shape","I","J","L","O","S","T","Z","randomTetromino","randTetromino","Math","floor","random","React","memo","console","log","StyledStage","height","width","Stage","map","row","cell","key","StyledDisplay","gameOver","Display","text","StyledStartButton","button","StartButton","callback","onClick","StyledTetrisWrapper","bgImage","StyledTetris","usePlayer","useState","collided","setPlayer","rotate","matrix","dir","rotateTetro","_","index","col","reverse","resetPlayer","useCallback","STAGE_WIDTH","prev","clonedPlayer","JSON","parse","stringify","offset","useStage","setStage","rowsCleared","setRowsCleared","useEffect","updateStage","prevStage","newStage","forEach","value","reduce","ack","findIndex","unshift","push","sweepRows","Tetris","dropTime","setDropTime","setGameOver","updatePlayerPos","rotatePlayer","score","setScore","rows","setRows","level","setLevel","linePoints","calcScore","useGameStatus","movePlayer","drop","move","keyCode","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","role","tabIndex","onKeyDown","e","onKeyUp","className","style","fontWeight","whiteSpace","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.add91248.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg.91ccc7dd.jpg\";","export const STAGE_WIDTH = 12\r\nexport const STAGE_HEIGHT = 20\r\n\r\nexport const createStage = () =>\r\n  Array.from(Array(STAGE_HEIGHT), () =>\r\n    new Array(STAGE_WIDTH).fill([0, 'clear'])\r\n  )\r\n\r\nexport const checkCollision = (player, stage, { x: moveX, y: moveY }) => {\r\n  for (let y = 0; y < player.tetromino.length; y += 1) {\r\n    for (let x = 0; x < player.tetromino[y].length; x += 1) {\r\n      // 1. Check that we're on an actual Tetromino cell\r\n      if (player.tetromino[y][x] !== 0) {\r\n        if (\r\n          // 2. Check that our move is inside the game areas height (y)\r\n          // We shouldn't go through the bottom of the play area\r\n          !stage[y + player.pos.y + moveY] ||\r\n          // 3. Check that our move is inside the game areas width (x)\r\n          !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\r\n          // 4. Check that the cell wer'e moving to isn't set to clear\r\n          stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !==\r\n            'clear'\r\n        ) {\r\n          return true\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import styled from 'styled-components'\r\n\r\nexport const StyledCell = styled.div`\r\n  width: auto;\r\n  background: rgba(${props => props.color}, 0.8);\r\n  border: ${props => (props.type === 0 ? '0px solid' : '4px solid')};\r\n  border-bottom-color: rgba(${props => props.color}, 0.1);\r\n  border-right-color: rgba(${props => props.color}, 1);\r\n  border-top-color: rgba(${props => props.color}, 1);\r\n  border-left-color: rgba(${props => props.color}, 0.3);\r\n`\r\n","export const TETROMINOS = {\r\n  0: { shape: [[0]], color: '0, 0, 0' },\r\n  I: {\r\n    shape: [[0, 'I', 0, 0], [0, 'I', 0, 0], [0, 'I', 0, 0], [0, 'I', 0, 0]],\r\n    color: '80, 227, 230'\r\n  },\r\n  J: {\r\n    shape: [[0, 'J', 0], [0, 'J', 0], ['J', 'J', 0]],\r\n    color: '36, 95, 223'\r\n  },\r\n  L: {\r\n    shape: [[0, 'L', 0], [0, 'L', 0], [0, 'L', 'L']],\r\n    color: '223, 173, 36'\r\n  },\r\n  O: {\r\n    shape: [['O', 'O'], ['O', 'O']],\r\n    color: '223, 217, 36'\r\n  },\r\n  S: {\r\n    shape: [[0, 'S', 'S'], ['S', 'S', 0], [0, 0, 0]],\r\n    color: '48, 211, 56'\r\n  },\r\n  T: {\r\n    shape: [[0, 0, 0], ['T', 'T', 'T'], [0, 'T', 0]],\r\n    color: '132, 61, 198'\r\n  },\r\n  Z: {\r\n    shape: [['Z', 'Z', 0], [0, 'Z', 'Z'], [0, 0, 0]],\r\n    color: '227, 78, 78'\r\n  }\r\n}\r\n\r\nexport const randomTetromino = () => {\r\n  const tetrominos = 'IJLOSTZ'\r\n  const randTetromino =\r\n    tetrominos[Math.floor(Math.random() * tetrominos.length)]\r\n  return TETROMINOS[randTetromino]\r\n}\r\n","import React from 'react'\r\n\r\nimport { StyledCell } from './styles/StyledCell'\r\nimport { TETROMINOS } from '../tetrominos'\r\n\r\nconst Cell = ({ type }) => {\r\n  return (\r\n    <StyledCell type={type} color={TETROMINOS[type].color}>\r\n      {console.log('rerendered')}\r\n    </StyledCell>\r\n  )\r\n}\r\n\r\n//Only re-render when the cell is actually changing using React.memo\r\nexport default React.memo(Cell)\r\n","import styled from 'styled-components';\n\nexport const StyledStage = styled.div`\n  display: grid;\n  grid-template-rows: repeat(\n    ${props => props.height},\n    calc(25vw / ${props => props.width})\n  );\n  grid-template-columns: repeat(${props => props.width}, 1fr);\n  grid-gap: 1px;\n  border: 2px solid #333;\n  width: 100%;\n  max-width: 25vw;\n  background: #111;\n`;","import React from 'react'\r\nimport Cell from './Cell'\r\n\r\nimport { StyledStage } from './styles/StyledStage'\r\n\r\nconst Stage = ({ stage }) => {\r\n  return (\r\n    <StyledStage width={stage[0].length} height={stage.length}>\r\n      {stage.map(row => row.map((cell, x) => <Cell key={x} type={cell[0]} />))}\r\n    </StyledStage>\r\n  )\r\n}\r\n\r\nexport default Stage\r\n","import styled from 'styled-components';\n\nexport const StyledDisplay = styled.div`\n  box-sizing: border-box;\n  display: flex;\n  align-items: center; \n  margin: 0 0 20px 0;\n  padding: 20px;\n  border: 4px solid #333;\n  min-height: 30px;\n  width: 100%;\n  border-radius: 20px;\n  color: ${props => (props.gameOver ? 'red' : '#999')};\n  background: #000;\n  font-family: Pixel, Arial, Helvetica, sans-serif;\n  font-size: 0.8rem;\n`;","import React from 'react'\r\n\r\nimport { StyledDisplay } from './styles/StyledDisplay'\r\nconst Display = ({ gameOver, text }) => {\r\n  return <StyledDisplay gameOver={gameOver}>{text}</StyledDisplay>\r\n}\r\n\r\nexport default Display\r\n","import styled from 'styled-components';\n\nexport const StyledStartButton = styled.button`\n  box-sizing: border-box;\n  margin: 0 0 20px 0;\n  padding: 20px;\n  min-height: 30px;\n  width: 100%;\n  border-radius: 20px;\n  border: none;\n  color: white;\n  background: #333;\n  font-family: Pixel, Arial, Helvetica, sans-serif;\n  font-size: 1rem;\n  outline: none;\n  cursor: pointer;\n`","import React from 'react'\r\nimport { StyledStartButton } from './styles/StyledStartButton'\r\nconst StartButton = ({ callback }) => {\r\n  return <StyledStartButton onClick={callback}>Start Game</StyledStartButton>\r\n}\r\n\r\nexport default StartButton\r\n","import styled from 'styled-components'\n\nimport bgImage from '../../images/bg.jpg'\n\nexport const StyledTetrisWrapper = styled.div`\n  width: 100vw;\n  height: 100vh;\n  background: url(${bgImage}) #000;\n  background-size: cover;\n  overflow: hidden;\n`\n\nexport const StyledTetris = styled.div`\n  display: flex;\n  align-items: flex-start;\n  padding: 40px;\n  margin: 0 auto;\n  max-width: 900px;\n\n  aside {\n    width: 100%;\n    max-width: 200px;\n    display: block;\n    padding: 0 20px;\n  }\n`\n","import { useState, useCallback } from 'react'\r\n\r\nimport { TETROMINOS, randomTetromino } from '../tetrominos'\r\nimport { STAGE_WIDTH, checkCollision } from '../gameHelper'\r\n\r\nexport const usePlayer = () => {\r\n  const [player, setPlayer] = useState({\r\n    pos: { x: 0, y: 0 },\r\n    tetromino: TETROMINOS[0].shape,\r\n    collided: false\r\n  })\r\n\r\n  const updatePlayerPos = ({ x, y, collided }) => {\r\n    setPlayer(prev => ({\r\n      ...prev,\r\n      pos: { x: (prev.pos.x += x), y: (prev.pos.y += y) },\r\n      collided\r\n    }))\r\n  }\r\n\r\n  const rotate = (matrix, dir) => {\r\n    //Make the rows = columns (transpose)\r\n    const rotateTetro = matrix.map((_, index) => matrix.map(col => col[index]))\r\n\r\n    //Reverse each row to get a rotated matrix\r\n    if (dir > 0) return rotateTetro.map(row => row.reverse())\r\n    return rotateTetro.reverse()\r\n  }\r\n\r\n  const rotatePlayer = (stage, dir) => {\r\n    const clonedPlayer = JSON.parse(JSON.stringify(player))\r\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir)\r\n\r\n    const pos = clonedPlayer.pos.x\r\n    let offset = 1\r\n    while (checkCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\r\n      clonedPlayer.pos.x += offset\r\n      offset = -(offset + (offset > 0 ? 1 : -1))\r\n      if (offset > clonedPlayer.tetromino[0].length) {\r\n        //Rotate back\r\n        rotate(clonedPlayer.tetromino, -dir)\r\n        clonedPlayer.pos.x = pos\r\n        return\r\n      }\r\n    }\r\n    setPlayer(clonedPlayer)\r\n  }\r\n\r\n  const resetPlayer = useCallback(() => {\r\n    setPlayer({\r\n      pos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\r\n      tetromino: randomTetromino().shape,\r\n      collided: false\r\n    })\r\n  }, [])\r\n\r\n  return [player, updatePlayerPos, resetPlayer, rotatePlayer]\r\n}\r\n","import { useState, useEffect } from 'react'\r\nimport { createStage } from '../gameHelper'\r\n\r\nexport const useStage = (player, resetPlayer) => {\r\n  const [stage, setStage] = useState(createStage())\r\n  const [rowsCleared, setRowsCleared] = useState(0)\r\n\r\n  useEffect(() => {\r\n    setRowsCleared(0)\r\n\r\n    const sweepRows = newStage =>\r\n      newStage.reduce((ack, row) => {\r\n        if (row.findIndex(cell => cell[0] === 0) === -1) {\r\n          setRowsCleared(prev => prev + 1)\r\n          ack.unshift(new Array(newStage[0].length).fill([0, 'clear']))\r\n          return ack\r\n        }\r\n        ack.push(row)\r\n        return ack\r\n      }, [])\r\n\r\n    const updateStage = prevStage => {\r\n      //First have to flush the stage from the previous render\r\n      const newStage = prevStage.map(row =>\r\n        //We grab the value 'clear'\r\n        row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell))\r\n      )\r\n      //Draw the tetromino\r\n      player.tetromino.forEach((row, y) => {\r\n        row.forEach((value, x) => {\r\n          if (value !== 0) {\r\n            newStage[y + player.pos.y][x + player.pos.x] = [\r\n              value,\r\n              `${player.collided ? 'merged' : 'clear'}`\r\n            ]\r\n          }\r\n        })\r\n      })\r\n\r\n      //Check if we collided\r\n      if (player.collided) {\r\n        resetPlayer()\r\n        //Does any row clearing if possible\r\n        return sweepRows(newStage)\r\n      }\r\n\r\n      return newStage\r\n    }\r\n\r\n    setStage(prev => updateStage(prev))\r\n  }, [player, resetPlayer])\r\n\r\n  return [stage, setStage, rowsCleared]\r\n}\r\n","import { useState, useEffect, useCallback } from 'react'\r\n\r\nexport const useGameStatus = rowsCleared => {\r\n  const [score, setScore] = useState(0)\r\n  const [rows, setRows] = useState(0)\r\n  const [level, setLevel] = useState(0)\r\n\r\n  const linePoints = [40, 100, 300, 1200]\r\n\r\n  const calcScore = useCallback(() => {\r\n    //We have scored\r\n    if (rowsCleared > 0) {\r\n      //This is how original tetris score is calculated\r\n\r\n      setScore(prev => prev + linePoints[rowsCleared - 1] * (level + 1))\r\n      setRows(prev => prev + rowsCleared)\r\n    }\r\n  }, [level, linePoints, rowsCleared])\r\n\r\n  useEffect(() => {\r\n    calcScore()\r\n  }, [calcScore, rowsCleared, score])\r\n\r\n  return [score, setScore, rows, setRows, level, setLevel]\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nimport { createStage, checkCollision } from '../gameHelper'\r\n\r\n//Components\r\nimport Stage from './Stage'\r\nimport Display from './Display'\r\nimport StartButton from './StartButton'\r\n\r\n//Styled Components\r\nimport { StyledTetris, StyledTetrisWrapper } from './styles/StyledTetris'\r\n\r\n//Custom Hooks\r\nimport { usePlayer } from '../hooks/usePlayer'\r\nimport { useStage } from '../hooks/useStage'\r\nimport { useInterval } from '../hooks/useInterval'\r\nimport { useGameStatus } from '../hooks/useGameStatus'\r\n\r\nimport './styles/Basic.css'\r\n\r\nconst Tetris = () => {\r\n  const [dropTime, setDropTime] = useState(null)\r\n  const [gameOver, setGameOver] = useState(false)\r\n\r\n  const [player, updatePlayerPos, resetPlayer, rotatePlayer] = usePlayer()\r\n  const [stage, setStage, rowsCleared] = useStage(player, resetPlayer)\r\n  const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(\r\n    rowsCleared\r\n  )\r\n\r\n  console.log('rerender')\r\n\r\n  //Move player left and right\r\n  const movePlayer = dir => {\r\n    if (!checkCollision(player, stage, { x: dir, y: 0 })) {\r\n      updatePlayerPos({ x: dir, y: 0 })\r\n    }\r\n  }\r\n\r\n  const startGame = () => {\r\n    //Reset everything\r\n    setStage(createStage())\r\n    setDropTime(500)\r\n    resetPlayer()\r\n    setGameOver(false)\r\n    setScore(0)\r\n    setRows(0)\r\n    setLevel(0)\r\n  }\r\n\r\n  const drop = () => {\r\n    //Increase level when player has cleared 10 rows\r\n    if (rows > (level + 1) * 10) {\r\n      setLevel(prev => prev + 1)\r\n\r\n      //We want to increase speed\r\n      setDropTime(1000 / (level + 1) + 200)\r\n    }\r\n\r\n    if (!checkCollision(player, stage, { x: 0, y: 1 })) {\r\n      updatePlayerPos({ x: 0, y: 1, collided: false })\r\n    } else {\r\n      //Check if game over when collided to the top\r\n      if (player.pos.y < 1) {\r\n        console.log('GAME OVER !!!')\r\n        setGameOver(true)\r\n        setDropTime(null)\r\n      }\r\n      //Placing piece down when collided\r\n      updatePlayerPos({ x: 0, y: 0, collided: true })\r\n    }\r\n  }\r\n\r\n  const keyUp = ({ keyCode }) => {\r\n    if (!gameOver) {\r\n      if (keyCode === 40) {\r\n        console.log('Interval on')\r\n        setDropTime(1000 / (level + 1) + 200)\r\n      }\r\n    }\r\n  }\r\n\r\n  const dropPlayer = () => {\r\n    console.log('Interval off')\r\n    setDropTime(null)\r\n    drop()\r\n  }\r\n\r\n  const move = ({ keyCode }) => {\r\n    if (!gameOver) {\r\n      //Keycode is an event attribute, keycode 37 = the left arrow key on our keyboard\r\n      if (keyCode === 37) {\r\n        //Move to the left = move by -1\r\n        movePlayer(-1)\r\n      }\r\n      //Move right\r\n      else if (keyCode === 39) {\r\n        movePlayer(1)\r\n      }\r\n      //Move down\r\n      else if (keyCode === 40) {\r\n        dropPlayer()\r\n      }\r\n      //Press up to rotate\r\n      else if (keyCode === 38) {\r\n        rotatePlayer(stage, 1)\r\n      }\r\n    }\r\n  }\r\n\r\n  useInterval(() => {\r\n    drop()\r\n  }, dropTime)\r\n\r\n  return (\r\n    <StyledTetrisWrapper\r\n      role=\"button\"\r\n      tabIndex=\"0\"\r\n      onKeyDown={e => move(e)}\r\n      onKeyUp={keyUp}\r\n    >\r\n      <h1 className=\"tetris-h1\">TETRIS BUILT WITH REACT</h1>\r\n      <StyledTetris>\r\n        <Stage stage={stage} />\r\n        <aside>\r\n          {gameOver ? (\r\n            <Display gameOver={gameOver} text=\"Game Over\" />\r\n          ) : (\r\n            <div>\r\n              <Display text={`Score: ${score}`} />\r\n              <Display text={`Rows: ${rows}`} />\r\n              <Display text={`Level: ${level}`} />\r\n            </div>\r\n          )}\r\n          <StartButton callback={startGame} />\r\n          <br />\r\n          <p\r\n            style={{\r\n              color: 'white',\r\n              fontWeight: 'bold',\r\n              whiteSpace: 'nowrap'\r\n            }}\r\n          >\r\n            Developed by Billy Huynh as a Learning Piece\r\n          </p>\r\n          <p\r\n            style={{ color: 'white', fontWeight: 'bold', whiteSpace: 'nowrap' }}\r\n          >\r\n            Credits to by weibenfalk and freeCodeCamp.org\r\n          </p>\r\n        </aside>\r\n      </StyledTetris>\r\n    </StyledTetrisWrapper>\r\n  )\r\n}\r\n\r\nexport default Tetris\r\n","import { useEffect, useRef } from 'react';\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n  }, [delay]);\n}\n","import React from 'react'\nimport Tetris from './components/Tetris'\n\nconst App = () => (\n  <div className=\"App\">\n    <Tetris />\n  </div>\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}